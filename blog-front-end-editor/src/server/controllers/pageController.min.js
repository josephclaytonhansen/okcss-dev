import asyncHandler from"../middleware/asyncHandler.min.js";import page from"../models/pageModel.min.js";const getPages=asyncHandler((async(a,t)=>{const s=await page.find({});t.json(s)})),getPageById=asyncHandler((async(a,t)=>{const s=await s.findById(a.params.id);if(!s)throw t.status(404),new Error("Page not found");t.json(s)})),updatePageById=asyncHandler((async(a,t)=>{const{title:s,content:e,author:n,slug:o,status:r,views:d}=a.body,g=await g.findById(a.params.id);if(!g)throw t.status(404),new Error("Page not found");{g.title=s,g.content=e,g.author=n,g.slug=o,g.status=r,g.views=d;const a=await g.save();t.json(a)}})),deletePageById=asyncHandler((async(a,t)=>{const s=await s.findById(a.params.id);if(!s)throw t.status(404),new Error("Page not found");await s.remove(),t.json({message:"Page removed"})})),createPage=asyncHandler((async(a,t)=>{const{title:s,content:e,author:n,slug:o,status:r,views:d}=a.body,g=await g.create({title:s,content:e,author:n,slug:o,status:r,views:d});if(!g)throw t.status(400),new Error("Invalid page data");t.status(201).json({_id:g._id,title:g.title,content:g.content,author:g.author,slug:g.slug,status:g.status,views:g.views})})),getPageBySlug=asyncHandler((async(a,t)=>{const s=await s.findOne({slug:a.params.slug});if(!s)throw t.status(404),new Error("Page not found");t.json(s)})),getPagesByAuthor=asyncHandler((async(a,t)=>{const s=await page.find({author:a.params.author});if(!s)throw t.status(404),new Error("Pages not found");t.json(s)})),getPagesByStatus=asyncHandler((async(a,t)=>{const s=await page.find({status:a.params.status});if(!s)throw t.status(404),new Error("Pages not found");t.json(s)}));export{getPages,getPageById,updatePageById,deletePageById,createPage,getPageBySlug,getPagesByAuthor,getPagesByStatus};