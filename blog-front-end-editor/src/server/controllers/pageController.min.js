import asyncHandler from"../middleware/asyncHandler.min.js";import Page from"../models/pageModel.min.js";const getPages=asyncHandler((async(a,t)=>{const e=await Page.find({});t.json(e)})),getPageById=asyncHandler((async(a,t)=>{const e=await Page.findById(a.params.id);if(!e)throw t.status(404),new Error("Page not found");t.json(e)})),updatePageById=asyncHandler((async(a,t)=>{const{title:e,content:s,author:n,slug:o,status:r,views:g}=a.body,d=await Page.findById(a.params.id);if(!d)throw t.status(404),new Error("Page not found");{d.title=e,d.content=s,d.author=n,d.slug=o,d.status=r,d.views=g;const a=await d.save();t.json(a)}})),deletePageById=asyncHandler((async(a,t)=>{const e=await Page.findById(a.params.id);if(!e)throw t.status(404),new Error("Page not found");await e.remove(),t.json({message:"Page removed"})})),createPage=asyncHandler((async(a,t)=>{const{title:e,content:s,author:n,slug:o,status:r,views:g}=a.body,d=await Page.create({title:e,content:s,author:n,slug:o,status:r,views:g});if(!d)throw t.status(400),new Error("Invalid page data");t.status(201).json({_id:d._id,title:d.title,content:d.content,author:d.author,slug:d.slug,status:d.status,views:d.views})})),getPageBySlug=asyncHandler((async(a,t)=>{const e=await Page.findOne({slug:a.params.slug});if(!e)throw t.status(404),new Error("Page not found");t.json(e)})),getPagesByAuthor=asyncHandler((async(a,t)=>{const e=await Page.find({author:a.params.author});if(!e)throw t.status(404),new Error("Pages not found");t.json(e)})),getPagesByStatus=asyncHandler((async(a,t)=>{const e=await Page.find({status:a.params.status});if(!e)throw t.status(404),new Error("Pages not found");t.json(e)}));export{getPages,getPageById,updatePageById,deletePageById,createPage,getPageBySlug,getPagesByAuthor,getPagesByStatus};