import asyncHandler from"../middleware/asyncHandler.min.js";import Post from"../models/postModel.min.js";const getPosts=asyncHandler((async(t,s)=>{const o=await Post.find({});s.json(o)})),getPostById=asyncHandler((async(t,s)=>{const o=await Post.findById(t.params.id);if(!o)throw s.status(404),new Error("post not found");s.json(o)})),updatePost=asyncHandler((async(t,s)=>{const{title:o,slug:e,author:a,categories:n,status:r,content:d,featuredImage:i,metaTitle:c,metaDescription:u,metaKeywords:y,scheduledDate:l}=t.body,g=await Post.findById(t.params.id);if(!g)throw s.status(404),new Error("post not found");{g.title=o,g.slug=e,g.author=a,g.categories=n,g.status=r,g.content=d,g.featured_image=i,g.meta_title=c,g.meta_description=u,g.meta_keywords=y,g.scheduled_date=l;const t=await Post.save();s.json(t)}})),deletePost=asyncHandler((async(t,s)=>{const o=await Post.findById(t.params.id);if(!o)throw s.status(404),new Error("post not found");await o.remove(),s.json({message:"post removed"})})),createPost=asyncHandler((async(t,s)=>{const{title:o,slug:e,author:a,categories:n,status:r,content:d,featuredImage:i,metaTitle:c,metaDescription:u,metaKeywords:y,scheduledDate:l}=t.body,g=await Post.create({title:o,slug:e,author:a,categories:n,status:r,content:d,featured_image:i,meta_title:c,meta_description:u,meta_keywords:y,scheduled_date:l});if(!g)throw s.status(404),new Error("post not found");s.json(g)})),getPostBySlug=asyncHandler((async(t,s)=>{const o=await Post.findOne({slug:t.params.slug});if(!o)throw s.status(404),new Error("post not found");s.json(o)})),getPostsByAuthor=asyncHandler((async(t,s)=>{const o=await Post.find({author:t.params.author});if(!o)throw s.status(404),new Error("posts not found");s.json(o)})),getPostsByStatus=asyncHandler((async(t,s)=>{const o=await Post.find({status:t.params.status});if(!o)throw s.status(404),new Error("posts not found");s.json(o)})),getPostsByCategory=asyncHandler((async(t,s)=>{const o=await Post.find({category:t.params.category});if(!o)throw s.status(404),new Error("posts not found");s.json(o)})),getUpcomingPosts=asyncHandler((async(t,s)=>{let o=new Date;const e=await Post.find({status:"scheduled",scheduledDate:{$gte:o},limit:3});if(!e)throw s.status(404),new Error("posts not found");s.json(e)}));export{getPosts,getPostById,updatePost,deletePost,createPost,getPostBySlug,getPostsByAuthor,getPostsByStatus,getPostsByCategory,getUpcomingPosts};