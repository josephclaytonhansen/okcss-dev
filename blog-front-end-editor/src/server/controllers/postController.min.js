import asyncHandler from"../middleware/asyncHandler.min.js";import Post from"../models/postModel.min.js";const getPosts=asyncHandler((async(t,s)=>{const e=await Post.find({});s.json(e)})),getPostById=asyncHandler((async(t,s)=>{const e=await Post.findById(t.params.id);if(!e)throw s.status(404),new Error("post not found");s.json(e)})),updatePost=asyncHandler((async(t,s)=>{const{title:e,slug:o,author:a,category:n,status:r,content:d,excerpt:c,featuredImage:i,metaTitle:u,metaDescription:y,metaKeywords:l,scheduledDate:g}=t.body,m=await Post.findById(t.params.id);if(!m)throw s.status(404),new Error("post not found");{m.title=e,m.slug=o,m.author=a,m.category=n,m.status=r,m.content=d,m.excerpt=c,m.featuredImage=i,m.metaTitle=u,m.metaDescription=y,m.metaKeywords=l,m.scheduled_date=g;const t=await Post.save();s.json(t)}})),deletePost=asyncHandler((async(t,s)=>{const e=await Post.findById(t.params.id);if(!e)throw s.status(404),new Error("post not found");await e.remove(),s.json({message:"post removed"})})),createPost=asyncHandler((async(t,s)=>{const{title:e,slug:o,author:a,category:n,status:r,content:d,excerpt:c,featuredImage:i,metaTitle:u,metaDescription:y,metaKeywords:l,scheduledDate:g}=t.body,m=await Post.create({title:e,slug:o,author:a,category:n,status:r,content:d,excerpt:c,featuredImage:i,metaTitle:u,metaDescription:y,metaKeywords:l,scheduledDate:g});if(!m)throw s.status(404),new Error("post not found");s.json(m)})),getPostBySlug=asyncHandler((async(t,s)=>{const e=await Post.findOne({slug:t.params.slug});if(!e)throw s.status(404),new Error("post not found");s.json(e)})),getPostsByAuthor=asyncHandler((async(t,s)=>{const e=await Post.find({author:t.params.author});if(!e)throw s.status(404),new Error("posts not found");s.json(e)})),getPostsByStatus=asyncHandler((async(t,s)=>{const e=await Post.find({status:t.params.status});if(!e)throw s.status(404),new Error("posts not found");s.json(e)})),getPostsByCategory=asyncHandler((async(t,s)=>{const e=await Post.find({category:t.params.category});if(!e)throw s.status(404),new Error("posts not found");s.json(e)})),getUpcomingPosts=asyncHandler((async(t,s)=>{let e=new Date;const o=await Post.find({status:"scheduled",scheduledDate:{$gte:e},limit:3});if(!o)throw s.status(404),new Error("posts not found");s.json(o)}));export{getPosts,getPostById,updatePost,deletePost,createPost,getPostBySlug,getPostsByAuthor,getPostsByStatus,getPostsByCategory,getUpcomingPosts};