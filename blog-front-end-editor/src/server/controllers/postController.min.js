import asyncHandler from"../middleware/asyncHandler.min.js";import post from"../models/postModel.min.js";const getPosts=asyncHandler((async(t,s)=>{const e=await post.find({});s.json(e)})),getPostById=asyncHandler((async(t,s)=>{const e=await e.findById(t.params.id);if(!e)throw s.status(404),new Error("post not found");s.json(e)})),updatePost=asyncHandler((async(t,s)=>{const{title:e,slug:a,author:o,category:n,status:r,content:d,excerpt:c,featuredImage:i,metaTitle:u,metaDescription:y,metaKeywords:l,scheduledDate:g}=t.body,p=await p.findById(t.params.id);if(!p)throw s.status(404),new Error("post not found");{p.title=e,p.slug=a,p.author=o,p.category=n,p.status=r,p.content=d,p.excerpt=c,p.featuredImage=i,p.metaTitle=u,p.metaDescription=y,p.metaKeywords=l,p.scheduledDate=g;const t=await p.save();s.json(t)}})),deletePost=asyncHandler((async(t,s)=>{const e=await e.findById(t.params.id);if(!e)throw s.status(404),new Error("post not found");await e.remove(),s.json({message:"post removed"})})),createPost=asyncHandler((async(t,s)=>{const{title:e,slug:a,author:o,category:n,status:r,content:d,excerpt:c,featuredImage:i,metaTitle:u,metaDescription:y,metaKeywords:l,scheduledDate:g}=t.body,p=await p.create({title:e,slug:a,author:o,category:n,status:r,content:d,excerpt:c,featuredImage:i,metaTitle:u,metaDescription:y,metaKeywords:l,scheduledDate:g});if(!p)throw s.status(404),new Error("post not found");s.json(p)})),getPostBySlug=asyncHandler((async(t,s)=>{const e=await e.findOne({slug:t.params.slug});if(!e)throw s.status(404),new Error("post not found");s.json(e)})),getPostsByAuthor=asyncHandler((async(t,s)=>{const e=await post.find({author:t.params.author});if(!e)throw s.status(404),new Error("posts not found");s.json(e)})),getPostsByStatus=asyncHandler((async(t,s)=>{const e=await post.find({status:t.params.status});if(!e)throw s.status(404),new Error("posts not found");s.json(e)})),getPostsByCategory=asyncHandler((async(t,s)=>{const e=await e.find({category:t.params.category});if(!e)throw s.status(404),new Error("posts not found");s.json(e)})),getUpcomingPosts=asyncHandler((async(t,s)=>{let e=new Date;const a=await post.find({status:"scheduled",scheduledDate:{$gte:e},limit:3});if(!a)throw s.status(404),new Error("posts not found");s.json(a)}));export{getPosts,getPostById,updatePost,deletePost,createPost,getPostBySlug,getPostsByAuthor,getPostsByStatus,getPostsByCategory,getUpcomingPosts};