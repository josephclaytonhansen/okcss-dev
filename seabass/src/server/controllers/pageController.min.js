import asyncHandler from"../middleware/asyncHandler.min.js";import Page from"../models/pageModel.min.js";const getPages=asyncHandler((async(a,t)=>{const e=await Page.find({});t.json(e)})),getPageById=asyncHandler((async(a,t)=>{const e=await Page.findById(a.params.id);if(!e)throw t.status(404),new Error("Page not found");t.json(e)})),updatePageById=asyncHandler((async(a,t)=>{const{title:e,content:s,author:n,slug:o,status:r,views:d}=a.body,i=await Page.findById(a.params.id);if(!i)throw t.status(404),new Error("Page not found");{i.title=e,i.content=s,i.author=n,i.slug=o,i.status=r,i.views=d;const a=await i.save();t.json(a)}})),deletePageById=asyncHandler((async(a,t)=>{const e=await Page.findById(a.params.id);if(!e)throw t.status(404),new Error("Page not found");await e.remove(),t.json({message:"Page removed"})})),createPage=asyncHandler((async(a,t)=>{const{title:e,content:s,author:n,slug:o,status:r,views:d}=a.body,i=await Page.create({title:e,content:s,author:n,slug:o,status:r,views:d});if(!i)throw t.status(400),new Error("Invalid page data");t.status(201).json({_id:i._id,title:i.title,content:i.content,author:i.author,slug:i.slug,status:i.status,views:i.views})})),getPageBySlug=asyncHandler((async(a,t)=>{const e=await Page.findOne({slug:a.params.slug});if(!e)throw t.status(404),new Error("Page not found");e.views=e.views+1,await e.save(),t.json(e)}));export{getPages,getPageById,updatePageById,deletePageById,createPage,getPageBySlug};