import asyncHandler from"../middleware/asyncHandler.min.js";import Post from"../models/postModel.min.js";const getPosts=asyncHandler((async(t,s)=>{const a=await Post.find({});s.json(a)})),getPostById=asyncHandler((async(t,s)=>{const a=await Post.findById(t.params.id);if(!a)throw s.status(404),new Error("post not found");s.json(a)})),deletePostHistory=asyncHandler((async(t,s)=>{const a=await Post.findById(t.params.id);if(!a)throw s.status(404),new Error("post not found");a.history=[];await Post.findByIdAndUpdate({_id:t.params.id},{history:a.history})?s.json({message:"post history deleted"}):s.status(400).json({message:"invalid data"})})),updatePostHistory=asyncHandler((async(t,s)=>{const a=await Post.findById(t.params.id);if(!a)throw s.status(404),new Error("post not found");a.history.push(a.content);await Post.findByIdAndUpdate({_id:t.params.id},{history:a.history})?s.json({message:"post history updated"}):s.status(400).json({message:"invalid data"})})),updatePost=asyncHandler((async(t,s)=>{const{title:a,slug:o,author:e,categories:n,tags:r,status:d,content:i,featuredImage:y,metaTitle:u,metaDescription:c,metaKeywords:m}=t.body,l=await Post.findById(t.params.id);if(!l)throw s.status(404).json({message:"post not found"}),new Error("post not found");l.title=a;await Post.findByIdAndUpdate(t.params.id,{title:a,slug:o,status:d,content:i,featured_image:y,meta_title:u,meta_description:c,meta_keywords:m})?s.json({message:"post updated"}):s.status(400).json({message:"invalid data"})})),deletePost=asyncHandler((async(t,s)=>{const a=await Post.findById(t.params.id);if(!a)throw s.status(404),new Error("post not found");await a.remove(),s.json({message:"post removed"})})),createPost=asyncHandler((async(t,s)=>{const{title:a,slug:o,author:e,categories:n,status:r,content:d,featuredImage:i,metaTitle:y,metaDescription:u,metaKeywords:c,scheduledDate:m}=t.body,l=await Post.create({title:a,slug:o,author:e,categories:n,status:r,content:d,featured_image:i,meta_title:y,meta_description:u,meta_keywords:c,scheduled_date:m});if(!l)throw s.status(404),new Error("post not found");s.json(l)})),getPostBySlug=asyncHandler((async(t,s)=>{const a=await Post.findOne({slug:t.params.slug});if(!a)throw s.status(404),new Error("post not found");s.json(a)})),getPostsByAuthor=asyncHandler((async(t,s)=>{const a=await Post.find({author:t.params.author});if(!a)throw s.status(404),new Error("posts not found");s.json(a)})),getPostsByStatus=asyncHandler((async(t,s)=>{const a=await Post.find({status:t.params.status});if(!a)throw s.status(404),new Error("posts not found");s.json(a)})),getPostsByCategory=asyncHandler((async(t,s)=>{const a=await Post.find({category:t.params.category});if(!a)throw s.status(404),new Error("posts not found");s.json(a)})),getUpcomingPosts=asyncHandler((async(t,s)=>{let a=new Date;const o=await Post.find({status:"scheduled",scheduledDate:{$gte:a},limit:3});if(!o)throw s.status(404),new Error("posts not found");s.json(o)}));export{getPosts,getPostById,updatePost,updatePostHistory,deletePostHistory,deletePost,createPost,getPostBySlug,getPostsByAuthor,getPostsByStatus,getPostsByCategory,getUpcomingPosts};