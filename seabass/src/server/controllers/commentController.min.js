import asyncHandler from"../middleware/asyncHandler.min.js";import Comment from"../models/commentModel.min.js";const getComments=asyncHandler((async(t,n)=>{const o=await Comment.find({});n.json(o)})),getCommentById=asyncHandler((async(t,n)=>{const o=await Comment.findById(t.params.id);if(!o)throw n.status(404),new Error("comment not found");n.json(o)})),updateComment=asyncHandler((async(t,n)=>{const{post:o,content:e,author:s,is_visible:a}=t.body,m=await Comment.findById(t.params.id);if(!m)throw n.status(404),new Error("comment not found");{m.post=o,m.content=e,m.author=s,m.is_visible=a;const t=await m.save();n.json(t)}})),deleteComment=asyncHandler((async(t,n)=>{const o=await Comment.findById(t.params.id);if(!o)throw n.status(404),new Error("comment not found");await o.remove(),n.json({message:"comment removed"})})),createComment=asyncHandler((async(t,n)=>{const{post:o,content:e,author:s,is_visible:a}=t.body,m=await Comment.create({post:o,content:e,author:s,is_visible:a});if(!m)throw n.status(400),new Error("invalid comment data");n.status(201).json({_id:m._id,post:m.post,content:m.content,is_visible:m.is_visible,author:m.author})}));export{getComments,getCommentById,updateComment,deleteComment,createComment};