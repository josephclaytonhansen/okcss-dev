import asyncHandler from"../middleware/asyncHandler.min.js";import Person from"../models/Person.js";const getPersons=asyncHandler((async(n,o)=>{const e=await Person.find();o.json(e)})),getPersonById=asyncHandler((async(n,o)=>{const e=await Person.findById(n.params.id);o.json(e)})),getPersonsByWard=asyncHandler((async(n,o)=>{const e=await Person.find({ward:n.params.ward});o.json(e)})),createPerson=asyncHandler((async(n,o)=>{const e=await Person.create(n.body);o.json(e)})),updatePerson=asyncHandler((async(n,o)=>{const e=await Person.findById(n.params.id);if(!e)throw o.status(404),new Error("Person not found");{e.ward=n.body.ward||e.ward,e.name=n.body.name||e.name,e.image=n.body.image||e.image,e.position=n.body.position||e.position,e.email=n.body.email||e.email,e.phone=n.body.phone||e.phone,e.size=n.body.size||e.size,e.organization=n.body.organization||e.organization,e.bio=n.body.bio||e.bio;const a=await e.save();o.json(a)}})),deletePerson=asyncHandler((async(n,o)=>{const e=await Person.findById(n.params.id);if(!e)throw o.status(404),new Error("Person not found");await e.remove(),o.json({message:"Person removed"})}));export{getPersons,getPersonById,getPersonsByWard,createPerson,updatePerson,deletePerson};