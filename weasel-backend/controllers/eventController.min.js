import asyncHandler from"../middleware/asyncHandler.min.js";import Event from"../models/Event.js";const getEvents=asyncHandler((async(n,t)=>{const a=await Event.find();t.json(a)})),getEventsByWard=asyncHandler((async(n,t)=>{const a=await Event.find({ward:n.params.ward});t.json(a)})),getEventsByWardandOrganization=asyncHandler((async(n,t)=>{const a=await Event.find({ward:n.params.ward,category:n.params.organization});t.json(a)})),getEventById=asyncHandler((async(n,t)=>{const a=await Event.findById(n.params.id);t.json(a)})),createEvent=asyncHandler((async(n,t)=>{const a=await Event.create(n.body);t.json(a)})),updateEvent=asyncHandler((async(n,t)=>{const a=await Event.findById(n.params.id);if(!a)throw t.status(404),new Error("Event not found");{a.ward=n.body.ward||a.ward,a.time=n.body.time||a.time,a.title=n.body.title||a.title,a.description=n.body.description||a.description,a.color=n.body.color||a.color,a.category=n.body.category||a.category;const e=await a.save();t.json(e)}})),deleteEvent=asyncHandler((async(n,t)=>{const a=await Event.findById(n.params.id);if(!a)throw t.status(404),new Error("Event not found");await Event.deleteOne(a),t.json({message:"Event removed"})}));export{getEvents,getEventById,getEventsByWard,getEventsByWardandOrganization,createEvent,updateEvent,deleteEvent};