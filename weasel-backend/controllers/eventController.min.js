import asyncHandler from"../middleware/asyncHandler.min.js";import Event from"../models/Event.js";const getEvents=asyncHandler((async(n,a)=>{const t=await Event.find();a.json(t)})),getEventsByWard=asyncHandler((async(n,a)=>{const t=await Event.find({ward:n.params.ward});a.json(t)})),getEventsByWardandOrganization=asyncHandler((async(n,a)=>{const t=await Event.find({ward:n.params.ward,organization:n.params.organization});a.json(t)})),getEventById=asyncHandler((async(n,a)=>{const t=await Event.findById(n.params.id);a.json(t)})),createEvent=asyncHandler((async(n,a)=>{const t=await Event.create(n.body);a.json(t)})),updateEvent=asyncHandler((async(n,a)=>{const t=await Event.findById(n.params.id);if(!t)throw a.status(404),new Error("Event not found");{t.ward=n.body.ward||t.ward,t.time=n.body.time||t.time,t.title=n.body.title||t.title,t.description=n.body.description||t.description,t.color=n.body.color||t.color,t.category=n.body.category||t.category;const e=await t.save();a.json(e)}})),deleteEvent=asyncHandler((async(n,a)=>{const t=await Event.findById(n.params.id);if(!t)throw a.status(404),new Error("Event not found");await t.remove(),a.json({message:"Event removed"})}));export{getEvents,getEventById,getEventsByWard,getEventsByWardandOrganization,createEvent,updateEvent,deleteEvent};